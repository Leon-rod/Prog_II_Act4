// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Act_4_2_7.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Act_4_2_7.Models
{
    public partial class DBTurnosContext
    {
        private IDBTurnosContextProcedures _procedures;

        public virtual IDBTurnosContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DBTurnosContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDBTurnosContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DBTurnosContextProcedures : IDBTurnosContextProcedures
    {
        private readonly DBTurnosContext _context;

        public DBTurnosContextProcedures(DBTurnosContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SP_CONSULTAR_SERVICIOSResult>> SP_CONSULTAR_SERVICIOSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_CONSULTAR_SERVICIOSResult>("EXEC @returnValue = [dbo].[SP_CONSULTAR_SERVICIOS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_CONTAR_TURNOSAsync(string fecha, string hora, OutputParameter<int?> ctd_turnos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterctd_turnos = new SqlParameter
            {
                ParameterName = "ctd_turnos",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ctd_turnos?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fecha",
                    Size = 10,
                    Value = fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hora",
                    Size = 8,
                    Value = hora ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterctd_turnos,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_CONTAR_TURNOS] @fecha = @fecha, @hora = @hora, @ctd_turnos = @ctd_turnos OUTPUT", sqlParameters, cancellationToken);

            ctd_turnos.SetValue(parameterctd_turnos.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_INSERTAR_DETALLESAsync(int? id_turno, int? id_servicio, string observaciones, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_turno",
                    Value = id_turno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_servicio",
                    Value = id_servicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "observaciones",
                    Size = 200,
                    Value = observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_INSERTAR_DETALLES] @id_turno = @id_turno, @id_servicio = @id_servicio, @observaciones = @observaciones", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
